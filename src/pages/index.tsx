import type { NextPage, GetStaticProps } from "next";
import Head from "next/head";
import { client } from "../server/router/client";
import { trpc } from "../utils/trpc";

interface IIndexPageProps {
  greeting: string;
}

const Home: NextPage<IIndexPageProps> = ({ greeting }) => {
  // const { data } = trpc.useQuery(["example.hello", { text: "from Adam" }]);

  const { data, isLoading, isError, refetch, status } = trpc.useQuery(
    ["example.pathnames"],
    {
      enabled: false,
      refetchOnWindowFocus: false,
    }
  );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-screen min-h-screen flex p-4 overflow-y-scroll justify-start flex-col">
        <div className="pt-6 text-2xl text-blue-500 flex">{greeting}</div>
        <button
          onClick={() => {
            refetch();
          }}
        >
          Fetch client side
        </button>
        <div>Result and status</div>
        <div>status: {status}</div>
        <div>
          Result:{" "}
          {data?.map(({ pathname, visitCount }) => {
            return (
              <div key={pathname}>
                pathname: {pathname}, visitCount: {visitCount}{" "}
              </div>
            );
          })}
        </div>
      </div>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const { greeting } = await client.query("example.hello", {
    text: "from SSR",
  });
  return { props: { greeting } };
};

export default Home;
